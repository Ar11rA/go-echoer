{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/echo": {
            "get": {
                "description": "Fetches data from Postman Echo based on a query parameter",
                "produces": [
                    "application/json"
                ],
                "summary": "HTTP Handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query parameter",
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/types.EchoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - query parameter is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Echoes the posted body back from Postman Echo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "POST Handler",
                "parameters": [
                    {
                        "description": "Post Request Body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.EchoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/types.EchoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/env": {
            "get": {
                "description": "Check the env vars of the server",
                "produces": [
                    "application/json"
                ],
                "summary": "Sample env value Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health of the server",
                "produces": [
                    "application/json"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/publish": {
            "post": {
                "description": "Publishes a message to a RabbitMQ queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Publish Message to RabbitMQ",
                "parameters": [
                    {
                        "description": "MessagePublishRequest object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.MessagePublishRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message published successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - Content is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to publish message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quotes": {
            "get": {
                "description": "Fetches multiple quotes from Postman Echo API based on the limit parameter",
                "produces": [
                    "application/json"
                ],
                "summary": "HTTP Handler for Fetching Multiple Quotes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of quotes to fetch",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of quotes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.QuoteResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - limit parameter is required or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/redis/save": {
            "post": {
                "description": "Save a key-value pair to Redis using POST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "Save Data to Redis",
                "parameters": [
                    {
                        "description": "Key-value pair to save",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RedisDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data saved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/redis/{key}": {
            "get": {
                "description": "Retrieve a value from Redis using the provided key",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Data from Redis",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key to retrieve value",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Value retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error - failed to retrieve data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/save": {
            "get": {
                "description": "Saves content to a file based on the provided query parameter",
                "produces": [
                    "text/plain"
                ],
                "summary": "File Handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Content to save",
                        "name": "content",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Content saved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - content is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error - failed to save content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates a new user with the provided username and email",
                "produces": [
                    "application/json"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - username and email are required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error - failed to create user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieves user information by user ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get User by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/types.UserModel"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error - failed to retrieve user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.EchoRequest": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "types.EchoResponse": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "object",
                    "additionalProperties": true
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.MessagePublishRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string"
                }
            }
        },
        "types.QuoteResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "author": {
                    "type": "string"
                },
                "authorSlug": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "dateAdded": {
                    "type": "string"
                },
                "dateModified": {
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.RedisDataRequest": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "types.UserModel": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Add fields according to your schema",
                    "type": "string"
                },
                "id": {
                    "description": "Assuming ID is auto-incremented",
                    "type": "integer"
                },
                "username": {
                    "description": "Add fields according to your schema",
                    "type": "string"
                }
            }
        },
        "types.UserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}